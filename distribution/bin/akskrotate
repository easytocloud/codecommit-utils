#! /usr/bin/env zsh
#
# akskrotate - rotate your AWS IAM access key / secret key with confidence
#
# (C) easytocloud 2021
#

# test prerequisites

if test -z "${AWS_PROFILE}"
then
	echo "Please set AWS_PROFILE before calling akskrotate"
	exit 1
fi

# test if jq is installed

if ! command -v jq > /dev/null
then
	echo "Please install jq before calling akskrotate"
	exit 1
fi

# introduce akskrotate
cat <<EOF
akskrotate creates a new AK/SK key and deactivates the current AK/SK (rotate)

akskrotate expects your profiles are stored in ${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials}

akskrotate rotates the AWS IAM AK/SK for the user identified by "${AWS_PROFILE}"

akskrotate updates credentials automatically for
  - "${AWS_PROFILE}" 
  - other profiles that reference the same access key

YOU are responsible for updating the keys should they be used anywhere else

akskrotate does not deactivate your current key until the new key is tested and functional

to be able to rotate your key, akskrotate deletes the inactive key should there be one
as at no time you can have more than 2 keys

EOF

echo -n "Do you want to continue: [yN] "
read Confirmation
case ${Confirmation} in
y|Y)
	echo "Here we go .."
	;;
*)
	echo "Bye."
	exit 0
esac

# get currrent aksks from AWS

echo "Retrieving keys for ${AWS_PROFILE} .."
if ! ORG_Keys=$(aws iam list-access-keys)
then
	echo "Could not list access keys for ${AWS_PROFILE}" >&2
	exit 1
fi

# if multiple keys exist...

echo "Making sure there is a free slot for a temporary second active key .."

if (( $( echo ${ORG_Keys} | jq  ' .AccessKeyMetadata | length ') > 1 ))
then
	#
	# count active

	ActiveCnt=$( echo ${ORG_Keys}| jq -r '.AccessKeyMetadata[].Status' | grep -w Active | wc -l)

	if (( ActiveCnt > 1 ))
	then
	    echo "Too many active access-keys" >&2
		echo "Use:" >&2
		echo "  aws iam update-access-key --status Inactive --access-key-id <your-least-favourite-keyId>" >&2
		echo "to solve this issue." >&2
	    exit 1
	fi

	#
	# remove inactive key

	echo "Removing inactive key .."
	if ! aws iam delete-access-key --access-key-id $(echo $ORG_Keys| jq -c '.AccessKeyMetadata[] | select( .Status == "Inactive") | .AccessKeyId' | tr -d '"')
	then
		echo "Could not remove inactive key" >&2
		exit 2
	fi
fi

# Now only one key should be active, thats the one to replace

ToRetire=$(echo ${ORG_Keys} | jq -c '.AccessKeyMetadata[] | select( .Status == "Active") | .AccessKeyId' | tr -d '"' )

echo "Looking for other profiles with same access_key .."

ProfilesToUpdate=${AWS_PROFILE}

for pr in $(aws configure list-profiles)
do
    if [[ ${pr} != ${AWS_PROFILE} ]]
    then
		ak=$( aws configure get aws_access_key_id --profile ${pr})
		if [[ ${ak} == ${ToRetire} ]]
		then 
			echo "Adding ${pr} to list of profiles to update .."
			ProfilesToUpdate="${ProfilesToUpdate};${pr}"
		fi
    fi
done

#
# create new pair

echo "Creating new AK/SK .."

if ! NewKey=$(aws iam create-access-key)
then
	echo "Could not create new key" >&2
	exit 1
fi

# backup credentials file just in case

echo "Backing up your credentials file into ${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials}.akskrotate .."
cp ${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials} ${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials}.akskrotate

# store credentials in ~/.aws/credentials

for pr in $(echo ${ProfilesToUpdate} | tr ';' ' ')
do
	echo "Updating AK/SK for profile ${pr} in ${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials} .."

	aws configure set aws_access_key_id $(echo $NewKey| jq  .AccessKey.AccessKeyId | tr -d '"') --profile ${pr}
	aws configure set aws_secret_access_key $( echo $NewKey| jq  .AccessKey.SecretAccessKey | tr -d '"' ) --profile ${pr}
done

echo "Waiting 15 seconds for IAM changes to globally propagate .."
sleep 15

# test new configuration

# export AWS_ACCESS_KEY_ID=$( aws configure get  aws_access_key_id )
# export AWS_SECRET_ACCESS_KEY=$( aws configure get  aws_secret_access_key )

echo -n "Testing new key .. "

if ! IAM=$(aws sts get-caller-identity > /dev/null)
then
	echo "FAILED!" >&2
	echo "There is an issue using the new configuration - both keys are active now!!" >&2
	echo "Your might want to restore ${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials}.akskrotate .." >&2
	exit 4
else
	echo "SUCCESS"
fi

# deativate old aksk
echo "Deactivating previous key .."

aws iam update-access-key --status Inactive --access-key-id ${ToRetire} 

echo "Cleaning up backup .."
rm -f ${AWS_SHARED_CREDENTIALS_FILE:-~/.aws/credentials}.akskrotate
echo "Done."
